/***********************************************************************
 * Pipelined Y86-64 Simulator
 *
 * Copyright (c) 2002, 2010, 2015 R. Bryant and D. O'Hallaron,
 * All rights reserved.
 * May not be used, modified, or copied without permission.
 ***********************************************************************/ 

This directory contains the code to construct simulators for PIPE and
the variants of it described in the homework exercises.

*************************
1. Building the simulator
*************************

Different versions of the PIPE simulator can be constructed to use
different HCL files when working on the different homework problems.


Binary	VERSION		HCL File	  Description
psim	std		pipe-std.hcl	  Standard simulator (default)
psim	broken		pipe-broken.hcl   Does not handle any hazards
psim	full		pipe-full.hcl	  For adding iaddq

Once you've configured the Makefile, you can build different
versions of the simulators with different HCL files
with commands of the form:

	unix> make clean; make psim VERSION=xxx

where "xxx" is one of the versions listed above.  To save typing, you
can set the Makefile's VERSION variable. For example, if you are working
on Problems 4.52 and 4.53, which require to modify pipe-full.hcl, then 
you could set VERSION=full in the Makefile. Typing

	unix> make clean; make psim

would then make the pipe-full.hcl version of PIPE.

***********************
2. Using the simulators
***********************

The simulator recognizes the following command line arguments:

Usage: psim [-ht] [-l m] [-v n] file.yo

file.yo optional (default stdin)

   -h     Print this message
   -l m   Set instruction limit to m (default 10000)
   -v n   Set verbosity level to 0 <= n <= 2 (default 2)
   -t     Test result against the ISA simulator (yis) [TTY model only]

********
3. Files
********

Makefile		Build the simulator
README			This file

**********************************************
* Files related to the CS:APP Architecture Lab
**********************************************

* Sample programs
ncopy.ys		The default version of ncopy that the students optimize
ncopy.c			C version of ncopy that defines its semantics

* Preconstructed driver programs (by gen-driver.pl)
sdriver.ys		Driver that calls ncopy.ys on a short (4-word) array
ldriver.ys		Driver that calls ncopy.ys on a longer (63-word) array 
			Both drivers are generated automatically by the
			Makefile by typing "make drivers".

* Testing scripts
gen-driver.pl		Generate a driver program for an arbitrary ncopy 
			implementation (default ncopy.ys). Type "make drivers"
			to construct sdriver.ys and ldriver.ys.
benchmark.pl		Runs an implementation of ncopy on array sizes
			1 to 64	(default ncopy.ys) and computes its performance
			in units of CPE (cycles per element).
correctness.pl		Runs an implementation of ncopy on array sizes 
			0 to 64, and several longer ones and checks each for
			correctness.
check-len.pl		Determines number of bytes in .yo representation of
			ncopy function.


****************************************************
* HCL files for different versions of the simulators
****************************************************

pipe-std.hcl		The standard PIPE processor described in the text
pipe-broken.hcl		A simulator that does not detect or handle hazards
			(useful when explaining hazards in lectures)
pipe-full.hcl	 Add iaddq instruction to PIPE

*****************************
* PIPE simulator source files
*****************************

psim.c			Base simulator code
sim.h			PIPE header files
pipeline.h
stages.h
