#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# name : Kim Jiwon / ID : 2014-13666
# Describe how and why you modified the baseline code.
# I used loop unrolling - divided the given loop into 10 loops,
# then I used a jump table for the left 0~9 inputs.
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	iaddq $-9,%rdx		# len <= 9?
	jle L_end		# if so, goto L_end:

L1:	iaddq $-1, %rdx		# len -= 12 total
	mrmovq (%rdi), %r10	# read val1 from src
	mrmovq 8(%rdi), %r9	# read val2 from src
	rmmovq %r10, (%rsi)	# store val1 to dst
	andq %r10, %r10         # val1 <= 0?
	jle L2			# if val1 <= 0, goto L2
	iaddq $1, %rax		# count++
L2:	mrmovq 16(%rdi), %r10	# read val3 from src
	rmmovq %r9, 8(%rsi)	# store val2 to dst
	andq %r9, %r9           # val2 <= 0?
	jle L3			# if val2 <= 0, goto L3
	iaddq $1, %rax		# count++
L3:	mrmovq 24(%rdi), %r9	# read val4 from src
	rmmovq %r10, 16(%rsi)	# store val3 to dst
	andq %r10, %r10         # val3 <= 0?
	jle L4			# if val3 <= 0, goto L4
	iaddq $1, %rax		# count++
L4:	mrmovq 32(%rdi), %r10   # read val5 from src
        rmmovq %r9, 24(%rsi)    # store val4 to dst
	andq %r9, %r9           # val4 <= 0?
	jle L5                  # if val4 <= 0, goto L5
        iaddq $1, %rax          # count++
L5:	mrmovq 40(%rdi), %r9    # read val6 from src
        rmmovq %r10, 32(%rsi)   # store val5 to dst
	andq %r10, %r10         # val5 <= 0?
	jle L6                  # if val5 <= 0, goto L6
	iaddq $1, %rax          # count++
L6:	mrmovq 48(%rdi), %r10   # read val7 from src
        rmmovq %r9, 40(%rsi)    # store val6 to dst
	andq %r9, %r9           # val6 <= 0?
        jle L7                  # if val6 <= 0, goto L7
        iaddq $1, %rax          # count++
L7:	mrmovq 56(%rdi), %r9    # read val8 from src
        rmmovq %r10, 48(%rsi)   # store val7 to dst
	andq %r10, %r10         # val7 <= 0?
	jle L8                  # if val7 <= 0, goto L8
	iaddq $1, %rax          # count++
L8:	mrmovq 64(%rdi), %r10   # read val9 from src
        rmmovq %r9, 56(%rsi)    # store val8 to dst
	andq %r9, %r9           # val8 <= 0?
        jle L9                  # if val8 <= 0, goto L9
        iaddq $1, %rax          # count++
L9:	mrmovq 72(%rdi), %r9    # read val10 from src
        rmmovq %r10, 64(%rsi)   # store val9 to dst
	andq %r10, %r10         # val9 <= 0?
        jle L10                 # if val9 <= 0, goto L10
        iaddq $1, %rax          # count++
L10:    rmmovq %r9, 72(%rsi)    # store val10 to dst
	andq %r9, %r9           # val10 <= 0?
        jle test                # if val10 <= 0, goto test
        iaddq $1, %rax          # count++
test:	iaddq $80, %rdi		# src += 10
	iaddq $80, %rsi		# dst += 10
	iaddq $-9, %rdx		# len > 9?
	jg L1			# if so, goto L1
L_end:	iaddq $9, %rdx		# len += 9
	addq %rdx, %rdx		# len *= 2
	addq %rdx, %rdx		# len *= 4
	addq %rdx, %rdx		# len *= 8
	mrmovq Jto(%rdx), %rdx	
	pushq %rdx
	ret
J9:	mrmovq 64(%rdi), %r10   # read val9 from src
        andq %r10, %r10         # val9 <= 0?
        rmmovq %r10, 64(%rsi)   # store val9 to dst
        jle J8                  # if so, goto J8
        iaddq $1, %rax          # count++
J8:	mrmovq 56(%rdi), %r9    # read val8 from src
        andq %r9, %r9           # val8 <= 0?
        rmmovq %r9, 56(%rsi)    # store val8 to dst
        jle J7                  # if so, goto J7
        iaddq $1, %rax          # count++
J7:	mrmovq 48(%rdi), %r10   # read val7 from src
        andq %r10, %r10         # val7 <= 0?
        rmmovq %r10, 48(%rsi)   # store val7 to dst
        jle J6                  # if so, goto J6
        iaddq $1, %rax          # count++
J6:	mrmovq 40(%rdi), %r9    # read val6 from src
        andq %r9, %r9           # val6 <= 0?
        rmmovq %r9, 40(%rsi)    # store val6 to dst
        jle J5                  # if so, goto J5
        iaddq $1, %rax          # count++
J5:	mrmovq 32(%rdi), %r10   # read val5 from src
        andq %r10, %r10         # val5 <= 0?
        rmmovq %r10, 32(%rsi)   # store val5 to dst
        jle J4                  # if so, goto J4
        iaddq $1, %rax          # count++
J4:	mrmovq 24(%rdi), %r9    # read val4 from src
        andq %r9, %r9           # val4 <= 0?
        rmmovq %r9, 24(%rsi)    # store val4 to dst
        jle J3                  # if so, goto J3
        iaddq $1, %rax          # count++
J3:	mrmovq 16(%rdi), %r10   # read val2 from src
        andq %r10, %r10         # val2 <= 0?
        rmmovq %r10, 16(%rsi)   # store val2 to dst
        jle J2                  # if so, goto J2
        iaddq $1, %rax          # count++
J2:	mrmovq 8(%rdi), %r9     # read val2 from src
        andq %r9, %r9           # val2 <= 0?
        rmmovq %r9, 8(%rsi)     # store val2 to dst
        jle J1                  # if so, goto J1
        iaddq $1, %rax          # count++
J1:	mrmovq (%rdi), %r10     # read val1 from src
        andq %r10, %r10         # val1 <= 0?
	rmmovq %r10, (%rsi)     # store val1 to dst
        jle Done                # if so, goto Done
	iaddq $1, %rax          # count++
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
	.align 8
Jto:	.quad Done
	.quad J1
	.quad J2
	.quad J3
	.quad J4
	.quad J5
	.quad J6
	.quad J7
	.quad J8
	.quad J9
End:
#/* $end ncopy-ys */
